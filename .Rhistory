d
diff(d)
length(diff(d))
length(d)
c(diff(d), 1)
d <- c(d,9,10)
d
d <- c(d,11)
c(diff(d), 1)
d
cumsum(d)
c(diff(d), 1) %>% cumsum
d
d\
d
diff(d)
c(diff(d), 1)
head(d)
counts <- datcat$personid %>% as.data.frame() %>% group_by() %>% summarize(n_distinct())
counts <- datcat$personid %>% as.data.frame() %>% group_by() %>% summarize(n_distinct)
counts <- datcat$personid %>% as.data.frame() %>% group_by(.) %>% summarize(n_distinct)
counts <- datcat$personid %>% as.data.frame(a = .) %>% group_by(a) %>% summarize(n_distinct)
datcat$personid %>% as.data.frame(a = .)
datcat$personid %>% as.data.frame()
datcat$personid %>% as.data.frame() %>% group_by(1)
datcat$personid %>% as.data.frame() %>% group_by(1)
datcat$personid %>% as.data.frame() %>% group_by(1) %>% summarize(n_distinct)
datcat$personid %>% as.data.frame() %>% group_by(1) %>% summarize(n_distinct())
datcat$personid %>% as.data.frame() %>% group_by(1) %>% summarize(n_distinct(1))
datcat$personid %>% as.data.frame() %>% group_by(1) %>% summarize(n_distinct(`1`))
datcat$personid %>% as.data.frame() %>% group_by(`1``) %>% summarize(n_distinct(`1`))
datcat$personid %>% as.data.frame() %>% group_by(`1`) %>% summarize(n_distinct(`1`))
as.data.frame(datcat$personid) %>% group_by(`1`) %>% summarize(n_distinct(`1`))
as.data.frame(datcat$personid) %>% group_by()
data.frame(datcat$personid) %>% group_by()
data.frame(x = datcat$personid) %>% group_by()
data.frame(x = datcat$personid) %>% group_by(x)
data.frame(x = datcat$personid) %>% group_by(x) %>% summarize(n_distinct())
data.frame(x = datcat$personid) %>% group_by(x) %>% summarize(n_distinct(x))
head(datcat$personid)
data.frame(x = datcat$personid) %>% group_by(x) %>% summarize(n())
data.frame(x = datcat$personid) %>% group_by(x) %>% summarize(n())
counts <- data.frame(x = datcat$personid) %>% group_by(x) %>% summarize(n=n()) %>% '[['("n")
dim(dounts)
head(countts)
head(counts)
length(counts)
length(datcat$personid)
counts <- data.frame(x = datcat$personid) %>% group_by(x) %>% mutate(n=n()) %>% '[['("n")
length(counts)
head(counts)
Xmat <- array(0, c(nrow(datcat), length(bounds)))
previd <- NA
changes <- c(diff(datcat$personid), 1) #a 1 marks the final index of each personid
counts <- data.frame(x = datcat$personid) %>% group_by(x) %>% mutate(n=n()) %>% '[['("n")
for(r in 1:nrow(datcat)){
if(datcat$fail[r] == 1 & changes[r] == 1){
Xmat[r,counts[r]] <- 1
}
}
sum(Xmat)
lower_bound <- function(x, bounds){
ret <- rep(NA, length(x))
for(i in 1:length(x)){
xi <- x[i]
found <- (which(xi >= c(-Inf, bounds) & (xi <= c(bounds, Inf))))[1] - 1
if(found==0){found<-1}
ret[i] <- bounds[found]
}
return(ret)
}
bounds <- seq(0, floor(max(dat$nctdel)))
dat$timecat <- lower_bound(dat$nctdel, bounds)
dat$personid <- 1:nrow(dat)
datcat <- merge(dat$personid, bounds) %>%
unique() %>%
rename(personid=x, timecat=y) %>%
arrange(personid, timecat) %>%
#take all unique combinations of people and time categories
merge(dat, by=c("personid", "timecat"), all=TRUE) %>%
mutate(fail = ifelse(is.na(fail), 0, fail)) %>%
#add fail column
group_by(personid) %>%
mutate(maxtimecat = (timecat)[!is.na(nctdel)],
atrisk = (timecat <= maxtimecat)) %>%
filter(atrisk) %>%
#for each person, identify rows where persons are not at risk (after they fail/drop out), and remove those rows
select(personid, timecat, fail) %>%
as.data.frame()
#code to add predictors of race, gender, and number of symptoms
datcat <- merge(datcat, dat, by="personid", all=T) %>% select(personid, timecat = timecat.x, fail = fail.x, symptom, race, gender)
#code to add indicator effects of every timeunit
Xmat <- array(0, c(nrow(datcat), length(bounds)))
previd <- NA
changes <- c(diff(datcat$personid), 1) #a 1 marks the final index of each personid
counts <- data.frame(x = datcat$personid) %>% group_by(x) %>% mutate(n=n()) %>% '[['("n")
for(r in 1:nrow(datcat)){
if(datcat$fail[r] == 1 & changes[r] == 1){
Xmat[r,counts[r]] <- 1
}
}
colnames(Xmat) <- paste0("X",1:ncol(Xmat))
datcat <- cbind(datcat, Xmat)
# ids <- c(229)
# dat %>% filter(personid %in% ids) %>% select(personid, timecat, fail)
# datcat %>% filter(personid %in% ids)
logreg1 <- glm(fail ~ timecat + race + gender + symptom, data=datcat, family="binomial")
#not sure how to incorporate columns X1, ..., XT
datcat[20:40,]
logreg1 <- glm(fail ~ ., data=datcat, family="binomial")
logreg1 <- glm(fail ~ . - personid, data=datcat, family="binomial")
logreg1
rm(logreg1)
logreg1 <- glm(fail ~ . - personid, data=datcat, family="binomial")
logreg1
logreg1 <- glm(fail ~ ., data=datcat, family="binomial")
logreg1
glmnet
library(glmnet)
?glmnet
dat[-c("fail", "personid")]
dat[,-c("fail", "personid")]
dat[,!c("fail", "personid")]
dat[,c("fail", "personid")]
dat[,which(colnames(dat) != c("fail", "personid"))]
datcat[,which(colnames(datcat) != c("fail", "personid"))]
datcat[,]
which(colnames(datcat) != c("fail", "personid"))
!which(colnames(datcat) %in% c("fail", "personid"))
!which(colnames(datcat)which(colnames(datcat) %in% c("a", "g")) %in% c("fail", "personid"))
which(colnames(datcat) %in% c("a", "g"))
which(colnames(datcat) %in% c("fail"))
which(colnames(datcat) %in% c("fail", "colna"))
which(colnames(datcat) %in% c("fail", "personid"))
which(!colnames(datcat) %in% c("fail", "personid"))
lassoreg1 <- glmnet(y=dat$fail, X = dat[indepcols], family="binomial", alpha = 1)
indepcols <- which(!colnames(datcat) %in% c("fail", "personid"))
ridgereg1 <- glmnet(y=dat$fail, X = dat[indepcols], family="binomial", alpha = 0)
logreg1 <- glm(fail ~ . - personid, data=datcat, family="binomial") #does not converge
indepcols <- which(!colnames(datcat) %in% c("fail", "personid"))
lassoreg1 <- glmnet(y=datcat$fail, X = datcat[indepcols], family="binomial", alpha = 1)
datcat[indepcols]
indepcols <- which(!colnames(datcat) %in% c("fail", "personid"))
lassoreg1 <- glmnet(y=datcat$fail, X = datcat[indepcols], family="binomial", alpha = 1)
indepcols <- which(!colnames(datcat) %in% c("fail", "personid"))
lassoreg1 <- glmnet(y=datcat$fail, X = datcat[indepcols], family="binomial", alpha = 1)
ridgereg1 <- glmnet(y=datcat$fail, X = dat[,indepcols], family="binomial", alpha = 0)
lassoreg1 <- glmnet(y=datcat$fail, x = datcat[indepcols], family="binomial", alpha = 1)
ridgereg1 <- glmnet(y=datcat$fail, x = dat[,indepcols], family="binomial", alpha = 0)
lassoreg1 <- glmnet(y=datcat$fail, x = datcat[indepcols], family="binomial", alpha = 1)
lassoreg1 <- glmnet(y=datcat$fail, x = datcat[indepcols], family="binomial", alpha = 1)
ridgereg1 <- glmnet(y=datcat$fail, x = datcat[,indepcols], family="binomial", alpha = 0)
lassoreg1 <- glmnet(y=datcat$fail, x = datcat[,indepcols], family="binomial", alpha = 1)
ridgereg1 <- glmnet(y=datcat$fail, x = datcat[,indepcols], family="binomial", alpha = 0)
typeof(datcat[,indepcols])
typeof(datcat$gender)
typeof(datcat$gender)
ridgereg1
datcat <- merge(datcat, dat, by="personid", all=T) %>% select(personid, timecat = timecat.x, fail = fail.x, symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender))
datcat <- merge(datcat, dat, by="personid", all=T) %>% select(personid, timecat = timecat.x, fail = fail.x, symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender))
head()
head(dat)
bounds <- seq(0, floor(max(dat$nctdel)))
dat$timecat <- lower_bound(dat$nctdel, bounds)
dat$personid <- 1:nrow(dat)
datcat <- merge(dat$personid, bounds) %>%
unique() %>%
rename(personid=x, timecat=y) %>%
arrange(personid, timecat) %>%
#take all unique combinations of people and time categories
merge(dat, by=c("personid", "timecat"), all=TRUE) %>%
mutate(fail = ifelse(is.na(fail), 0, fail)) %>%
#add fail column
group_by(personid) %>%
mutate(maxtimecat = (timecat)[!is.na(nctdel)],
atrisk = (timecat <= maxtimecat)) %>%
filter(atrisk) %>%
#for each person, identify rows where persons are not at risk (after they fail/drop out), and remove those rows
select(personid, timecat, fail) %>%
as.data.frame()
#code to add predictors of race, gender, and number of symptoms
datcat <- merge(datcat, dat, by="personid", all=T) %>% select(personid, timecat = timecat.x, fail = fail.x, symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender))
lower_bound <- function(x, bounds){
ret <- rep(NA, length(x))
for(i in 1:length(x)){
xi <- x[i]
found <- (which(xi >= c(-Inf, bounds) & (xi <= c(bounds, Inf))))[1] - 1
if(found==0){found<-1}
ret[i] <- bounds[found]
}
return(ret)
}
bounds <- seq(0, floor(max(dat$nctdel)))
dat$timecat <- lower_bound(dat$nctdel, bounds)
dat$personid <- 1:nrow(dat)
datcat <- merge(dat$personid, bounds) %>%
unique() %>%
rename(personid=x, timecat=y) %>%
arrange(personid, timecat) %>%
#take all unique combinations of people and time categories
merge(dat, by=c("personid", "timecat"), all=TRUE) %>%
mutate(fail = ifelse(is.na(fail), 0, fail)) %>%
#add fail column
group_by(personid) %>%
mutate(maxtimecat = (timecat)[!is.na(nctdel)],
atrisk = (timecat <= maxtimecat)) %>%
filter(atrisk) %>%
#for each person, identify rows where persons are not at risk (after they fail/drop out), and remove those rows
select(personid, timecat, fail) %>%
as.data.frame()
#code to add predictors of race, gender, and number of symptoms
datcat <- merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender)) %>%
select(personid, timecat = timecat.x, fail = fail.x, symptom, race, gender)
#code to add indicator effects of every timeunit
Xmat <- array(0, c(nrow(datcat), length(bounds)))
previd <- NA
changes <- c(diff(datcat$personid), 1) #a 1 marks the final index of each personid
counts <- data.frame(x = datcat$personid) %>% group_by(x) %>% mutate(n=n()) %>% '[['("n")
for(r in 1:nrow(datcat)){
if(datcat$fail[r] == 1 & changes[r] == 1){
Xmat[r,counts[r]] <- 1
}
}
colnames(Xmat) <- paste0("X",1:ncol(Xmat))
datcat <- cbind(datcat, Xmat)
# ids <- c(229)
# dat %>% filter(personid %in% ids) %>% select(personid, timecat, fail)
# datcat %>% filter(personid %in% ids)
logreg1 <- glm(fail ~ . - personid, data=datcat, family="binomial") #does not converge
indepcols <- which(!colnames(datcat) %in% c("fail", "personid"))
lassoreg1 <- glmnet(y=datcat$fail, x = datcat[,indepcols], family="binomial", alpha = 1)
typeof(datcat$symptom)
typeof(datcat$gender)
typeof(datcat$race)
unique(datcat$race)
head(datcat)
typeof(datcat$fail)
typeof(datcat[,indepcols])
typeof(datcat[,2])
typeof(datcat[,c(2,3)])
typeof(as.matrix(datcat[,indepcols]))
apply(datcat, 2, typeof())
apply(datcat, 2, typeof)
bounds <- seq(0, floor(max(dat$nctdel)))
dat$timecat <- lower_bound(dat$nctdel, bounds)
dat$personid <- 1:nrow(dat)
datcat <- merge(dat$personid, bounds) %>%
unique() %>%
rename(personid=x, timecat=y) %>%
arrange(personid, timecat) %>%
#take all unique combinations of people and time categories
merge(dat, by=c("personid", "timecat"), all=TRUE) %>%
mutate(fail = ifelse(is.na(fail), 0, fail)) %>%
#add fail column
group_by(personid) %>%
mutate(maxtimecat = (timecat)[!is.na(nctdel)],
atrisk = (timecat <= maxtimecat)) %>%
filter(atrisk) %>%
#for each person, identify rows where persons are not at risk (after they fail/drop out), and remove those rows
select(personid, timecat, fail) %>%
as.data.frame()
#code to add predictors of race, gender, and number of symptoms
datcat <- merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender)) %>%
select(personid, timecat = timecat.x, fail = fail.x, symptom, race, gender)
#code to add indicator effects of every timeunit
Xmat <- array(0, c(nrow(datcat), length(bounds)))
previd <- NA
changes <- c(diff(datcat$personid), 1) #a 1 marks the final index of each personid
counts <- data.frame(x = datcat$personid) %>% group_by(x) %>% mutate(n=n()) %>% '[['("n")
for(r in 1:nrow(datcat)){
if(datcat$fail[r] == 1 & changes[r] == 1){
Xmat[r,counts[r]] <- 1
}
}
colnames(Xmat) <- paste0("X",1:ncol(Xmat))
datcat <- cbind(datcat, Xmat)
#take all unique combinations of people and time categories
apply(datcat,2,typeof)
head(datcat)
apply(Xmat,2,typeof)
apply(dat,2,typeof)
datcat <- merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender), personid = as.integer(personid), timecat = as.integer(timecat), fail = as.integer(fail)) %>%
select(personid, timecat = timecat.x, fail = fail.x, symptom, race, gender)
lower_bound <- function(x, bounds){
ret <- rep(NA, length(x))
for(i in 1:length(x)){
xi <- x[i]
found <- (which(xi >= c(-Inf, bounds) & (xi <= c(bounds, Inf))))[1] - 1
if(found==0){found<-1}
ret[i] <- bounds[found]
}
return(ret)
}
bounds <- seq(0, floor(max(dat$nctdel)))
dat$timecat <- lower_bound(dat$nctdel, bounds)
dat$personid <- 1:nrow(dat)
datcat <- merge(dat$personid, bounds) %>%
unique() %>%
rename(personid=x, timecat=y) %>%
arrange(personid, timecat) %>%
#take all unique combinations of people and time categories
merge(dat, by=c("personid", "timecat"), all=TRUE) %>%
mutate(fail = ifelse(is.na(fail), 0, fail)) %>%
#add fail column
group_by(personid) %>%
mutate(maxtimecat = (timecat)[!is.na(nctdel)],
atrisk = (timecat <= maxtimecat)) %>%
filter(atrisk) %>%
#for each person, identify rows where persons are not at risk (after they fail/drop out), and remove those rows
select(personid, timecat, fail) %>%
as.data.frame()
#code to add predictors of race, gender, and number of symptoms
datcat <- merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender), personid = as.integer(personid), timecat = as.integer(timecat), fail = as.integer(fail)) %>%
select(personid, timecat = timecat.x, fail = fail.x, symptom, race, gender)
lower_bound <- function(x, bounds){
ret <- rep(NA, length(x))
for(i in 1:length(x)){
xi <- x[i]
found <- (which(xi >= c(-Inf, bounds) & (xi <= c(bounds, Inf))))[1] - 1
if(found==0){found<-1}
ret[i] <- bounds[found]
}
return(ret)
}
bounds <- seq(0, floor(max(dat$nctdel)))
dat$timecat <- lower_bound(dat$nctdel, bounds)
dat$personid <- 1:nrow(dat)
datcat <- merge(dat$personid, bounds) %>%
unique() %>%
rename(personid=x, timecat=y) %>%
arrange(personid, timecat) %>%
#take all unique combinations of people and time categories
merge(dat, by=c("personid", "timecat"), all=TRUE) %>%
mutate(fail = ifelse(is.na(fail), 0, fail)) %>%
#add fail column
group_by(personid) %>%
mutate(maxtimecat = (timecat)[!is.na(nctdel)],
atrisk = (timecat <= maxtimecat)) %>%
filter(atrisk) %>%
#for each person, identify rows where persons are not at risk (after they fail/drop out), and remove those rows
select(personid, timecat, fail) %>%
as.data.frame()
dat$race = "Other"
dat$race[dat$black==1|dat$hisp==1 ]="Black or Hispanic"
dat$gender = "male"
dat$gender[dat$male==0]="female"
dat$symptom = "0"
dat$symptom[dat$sn1==1]="1"
dat$symptom[dat$sn2==1]="2"
dat$symptom[dat$sn3==1|dat$all4==1]="3+"
dat$scan="not scanned"
dat$scan[dat$fail==1]="scanned"
dat = dat %>% group_by(race) %>% mutate(racescan = ifelse(fail == 1, mean(fail), 1-mean(fail)))
dat = dat %>% group_by(symptom) %>% mutate(symptomscan = ifelse(fail == 1, mean(fail), 1-mean(fail)))
dat = dat %>% group_by(gender) %>% mutate(genderscan = ifelse(fail == 1, mean(fail), 1-mean(fail))) %>% as.data.frame()
dat$race = "Other"
dat$race[dat$black==1|dat$hisp==1 ]="Black or Hispanic"
dat$gender = "male"
dat$gender[dat$male==0]="female"
dat$symptom = "0"
dat$symptom[dat$sn1==1]="1"
dat$symptom[dat$sn2==1]="2"
dat$symptom[dat$sn3==1|dat$all4==1]="3+"
dat$scan="not scanned"
dat$scan[dat$fail==1]="scanned"
dat = dat %>% group_by(race) %>% mutate(racescan = ifelse(fail == 1, mean(fail), 1-mean(fail)))
dat = dat %>% group_by(symptom) %>% mutate(symptomscan = ifelse(fail == 1, mean(fail), 1-mean(fail)))
dat = dat %>% group_by(gender) %>% mutate(genderscan = ifelse(fail == 1, mean(fail), 1-mean(fail))) %>% as.data.frame()
lower_bound <- function(x, bounds){
ret <- rep(NA, length(x))
for(i in 1:length(x)){
xi <- x[i]
found <- (which(xi >= c(-Inf, bounds) & (xi <= c(bounds, Inf))))[1] - 1
if(found==0){found<-1}
ret[i] <- bounds[found]
}
return(ret)
}
bounds <- seq(0, floor(max(dat$nctdel)))
dat$timecat <- lower_bound(dat$nctdel, bounds)
dat$personid <- 1:nrow(dat)
datcat <- merge(dat$personid, bounds) %>%
unique() %>%
rename(personid=x, timecat=y) %>%
arrange(personid, timecat) %>%
#take all unique combinations of people and time categories
merge(dat, by=c("personid", "timecat"), all=TRUE) %>%
mutate(fail = ifelse(is.na(fail), 0, fail)) %>%
#add fail column
group_by(personid) %>%
mutate(maxtimecat = (timecat)[!is.na(nctdel)],
atrisk = (timecat <= maxtimecat)) %>%
filter(atrisk) %>%
#for each person, identify rows where persons are not at risk (after they fail/drop out), and remove those rows
select(personid, timecat, fail) %>%
as.data.frame()
apply(dat,2,typeof)
apply(dat,2,class)
dat[[1]]
typeof(dat[[1]])
typeof(dat[1])
for(i in 1:nrow(dat)){}
for(i in 1:nrow(dat)){
typeof(dat[[i]])
}
for(i in 1:ncol(dat)){
typeof(dat[[i]])
}
for(i in 1:ncol(dat)){
print(typeof(dat[[i]]))
}
for(i in 1:ncol(dat)){
cat(names(dat)[i], "\t", typeof(dat[[i]]), "\n")
}
for(i in 1:ncol(dat)){
cat(names(dat)[i], "\t\t", typeof(dat[[i]]), "\n")
}
merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender), personid = as.integer(personid), timecat = as.integer(timecat), fail = as.integer(fail)) %>%
select(personid, timecat = timecat.x, fail = fail.x, symptom, race, gender)
merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender), personid = as.integer(personid), timecat = as.integer(timecat), fail = as.integer(fail)) %>%
select(personid, timecat = timecat.x, fail = fail.x, symptom, race, gender)
%>% head()
merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender), personid = as.integer(personid), timecat = as.integer(timecat), fail = as.integer(fail)) %>%
select(personid, timecat = timecat.x, fail = fail.x, symptom, race, gender) %>% head()
datcat <- merge(datcat, dat, by="personid", all=T) %>% head()
merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender), personid = as.integer(personid), timecat = as.integer(timecat), fail = as.integer(fail)) %>%
select(personid, timecat = timecat.x, fail = fail.x, symptom, race, gender) %>% head()
merge(datcat, dat, by="personid", all=T) %>% head()
lower_bound <- function(x, bounds){
ret <- rep(NA, length(x))
for(i in 1:length(x)){
xi <- x[i]
found <- (which(xi >= c(-Inf, bounds) & (xi <= c(bounds, Inf))))[1] - 1
if(found==0){found<-1}
ret[i] <- bounds[found]
}
return(ret)
}
bounds <- seq(0, floor(max(dat$nctdel)))
dat$timecat <- lower_bound(dat$nctdel, bounds)
dat$personid <- 1:nrow(dat)
datcat <- merge(dat$personid, bounds) %>%
unique() %>%
rename(personid=x, timecat=y) %>%
arrange(personid, timecat) %>%
#take all unique combinations of people and time categories
merge(dat, by=c("personid", "timecat"), all=TRUE) %>%
mutate(fail = ifelse(is.na(fail), 0, fail)) %>%
#add fail column
group_by(personid) %>%
mutate(maxtimecat = (timecat)[!is.na(nctdel)],
atrisk = (timecat <= maxtimecat)) %>%
filter(atrisk) %>%
#for each person, identify rows where persons are not at risk (after they fail/drop out), and remove those rows
select(personid, timecat, fail) %>%
as.data.frame()
merge(datcat, dat, by="personid", all=T) %>% head()
merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender), personid = as.integer(personid), timecat = as.integer(timecat.x), fail = as.integer(fail.x)) %>%
select(personid, timecat = timecat, fail = fail, symptom, race, gender)
merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender), personid = as.integer(personid), timecat = as.integer(timecat.x), fail = as.integer(fail.x)) %>%
select(personid, timecat = timecat, fail = fail, symptom, race, gender)
datcat <- merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom = as.factor(symptom), race = as.factor(race), gender = as.factor(gender), personid = as.integer(personid), timecat = as.integer(timecat.x), fail = as.integer(fail.x)) %>%
select(personid, timecat = timecat, fail = fail, symptom, race, gender)
for(i in 1:ncol(datcat)){
cat(names(datcat)[i], "\t", typeof(datcat[[i]]), "\n")
}
head(datcat)
Xmat <- array(0, c(nrow(datcat), length(bounds)))
previd <- NA
changes <- c(diff(datcat$personid), 1) #a 1 marks the final index of each personid
counts <- data.frame(x = datcat$personid) %>% group_by(x) %>% mutate(n=n()) %>% '[['("n")
for(r in 1:nrow(datcat)){
if(datcat$fail[r] == 1 & changes[r] == 1){
Xmat[r,counts[r]] <- 1
}
}
colnames(Xmat) <- paste0("X",1:ncol(Xmat))
datcat <- cbind(datcat, Xmat)
for(i in 1:ncol(datcat)){
cat(names(datcat)[i], "\t", typeof(datcat[[i]]), "\n")
}
logreg1 <- glm(fail ~ . - personid, data=datcat, family="binomial") #does not converge
indepcols <- which(!colnames(datcat) %in% c("fail", "personid"))
lassoreg1 <- glmnet(y=datcat$fail, x = datcat[,indepcols], family="binomial", alpha = 1)
lassoreg1 <- glmnet(y=datcat$fail, x = datcat[,indepcols], family="binomial", alpha = 1)
lassoreg1 <- glmnet(y=datcat$fail, x = as.matrix(datcat[,indepcols]), family="binomial", alpha = 1)
View(as.matrix(datcat[,indepcols]))
paste0("X", 0:27)
lassoreg1 <- glmnet(y=datcat$fail, x = datcat[,paste0("X", 0:27)], family="binomial", alpha = 1)
datcat[,paste0("X", 1:26)]
lassoreg1 <- glmnet(y=datcat$fail, x = datcat[,paste0("X", 1:26)], family="binomial", alpha = 1)
lassoreg1 <- glmnet(y=datcat$fail, x = as.matrix(datcat[,paste0("X", 1:26)]), family="binomial", alpha = 1)
ridgereg1 <- glmnet(y=datcat$fail, x = as.matrix(datcat[,indepcols]_, family="binomial", alpha = 0)
ridgereg1 <- glmnet(y=datcat$fail, x = as.matrix(datcat[,indepcols]), family="binomial", alpha = 0)
lassoreg1 <- glmnet(y=datcat$fail, x = as.matrix(datcat[,paste0("X", 1:26)]), family="binomial", alpha = 1)
apply(datcat, 2, typeof)
head(datcat[[1]])
head(datcat[["symptom"]])
head(datcat[["race"]])
head(datcat[["gender"]])
colnames(datcat[indepcols])
