?glm
glm(y ~ 0 + X, family="binomial")
glm(y ~ 0 + X, family="binomial", model = FALES)
glm(y ~ 0 + X, family="binomial", model = FALSE)
glm(y ~ 0 + X, family="binomial", x=FALSE)
glm(y ~ 0 + X, family="binomial", x=FALSEhea)
head(X)
typeof(X)
class(X)
glm(y ~ 0 + data.frame(X), family="binomial")
glm(y ~ 0 + as.data.frame(X), family="binomial")
glm(y ~ 0 + ., family="binomial", data = cbind(y,X))
glm(y ~ 0 + ., family="binomial", data = as.data.frame(cbind(y,X)))
head(as.data.frame(cbind(y,
X)))
logmod <- glm(y ~ 0 + ., family="binomial", data = as.data.frame(cbind(y,X)))
logmod_stats <- logistic_diagnostics(logmod)
logmod_stats
lassomod <- cv.glmnet(y=y, x = X, family="binomial", type.measure="class", alpha = 1, intercept=FALSE)
coef(lassomod)
coef(ridgemod)
pridge <- binnedplot(x=ridgemod_stats$p_hat, y=ridgemod_stats$resids_p, main = "Ridge Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values")
pridge
summary(logreg)
summary(logmod)
head(summary(logmod))
names(summary(logmod))
head(summary(logmod)$coefficients)
summary(logmod)[["coefficients"]][,c(1,4)]
round(summary(logmod)[["coefficients"]][,c(1,4)],4)
coef(logmod)
coefficients(logmod)
?coef
coefficient(logmod)
coefficie(logmod)
round(coef(lassomod), 4)
round(as.numeric(coef(lassomod), 4))
(as.numeric(coef(lassomod)))
round(as.numeric(coef(lassomod)),4)
round(as.matrix(coef(lassomod)),4)
lassomodcoeff <- round(as.matrix(coef(lassomod)),4)
rownames(lassomodcoeff) <- NULL
lassomodcoeff
lassomodcoef <- round(as.matrix(coef(lassomod)),4)
colnames(lassomodcoef) <- NULL
lassomodcoef
head(logmodcoef)
logmodcoef <- round(summary(logmod)[["coefficients"]][,c(1,4)],4)
logmodcoef
names(logmodcoef)[2] <- "p-value"
logmodcoef
logmodcoef <- round(summary(logmod)[["coefficients"]][,c(1,4)],4)
colnames(logmodcoef)[2] <- "p-value"
logmodcoef
ridgemodcoef <- round(as.matrix(coef(ridgemod)),4)
colnames(ridgemodcoef) <- "Estimate"
ridgemodcoef
binnedplot(x=ridgemod_stats$p_hat, y=ridgemod_stats$resids_d, main = "Ridge Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values")
?binnedplot
binnedplot(x=ridgemod_stats$p_hat, y=ridgemod_stats$resids_d, main = "Ridge Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
binnedplot(x=lassomod_stats$p_hat, y=lassomod_stats$resids_d, main = "LASSO Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
binnedplot(x=logmod$fitted.values, y=logmod_stats$resids_d, main = "OLS Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
logmodcoef
logmodcoef <- list(round(summary(logmod)[["coefficients"]][,c(1,4)],4),
4)
logmodcoef
kable(logmodcoef)
library(knitr)
kable(logmodcoef)
logmodcoef <- list(round(summary(logmod)[["coefficients"]][,c(1,4)],4),
data.frame(4))
kable(logmodcoef)
kable(logmodcoef)
logmodcoef <- list(round(summary(logmod)[["coefficients"]][,c(1,4)],4),
t(data.frame(4)))
kable(logmodcoef)
bounds <- 0:5
lower_bound <- function(x, bounds){
ret <- rep(NA, length(x))
for(i in 1:length(x)){
xi <- x[i]
found <- (which(xi >= c(-Inf, bounds) & (xi <= c(bounds, Inf))))[1] - 1
if(found==0){found<-1}
ret[i] <- bounds[found]
}
return(ret)
}
de_logit <- function(logodds){
o <- exp(logodds)
p <- o/(1+o)
return(p)
}
bounds <- 0:5
dat$timecat <- as.integer(as.factor(lower_bound(dat$nctdel, bounds)))
dat$personid <- 1:nrow(dat)
datcat <- merge(dat$personid, bounds) %>%
unique() %>%
mutate(personid=x, timecat=as.integer(as.factor(y))) %>%
arrange(personid, timecat) %>%
#take all unique combinations of people and time categories
merge(dat, by=c("personid", "timecat"), all=TRUE) %>%
mutate(fail = ifelse(is.na(fail), 0, fail)) %>%
#add fail column
group_by(personid) %>%
mutate(maxtimecat = (timecat)[!is.na(nctdel)],
atrisk = (timecat <= maxtimecat)) %>%
filter(atrisk) %>%
#for each person, identify rows where persons are not at risk (after they fail/drop out), and remove those rows
dplyr::select(personid, timecat, fail) %>%
as.data.frame()
#code to add predictors of race, gender, and number of symptoms
datcat <- merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom0 = ifelse(symptom == 0, 1, 0),
symptom1 = ifelse(symptom == 1, 1, 0),
symptom2 = ifelse(symptom == 2, 1, 0),
raceother = ifelse(race == "Other", 1, 0),
male = ifelse(gender == "male", 1, 0),
personid = as.integer(personid),
timecat = as.integer(timecat.x),
fail = as.integer(fail.x)) %>%
dplyr::select(personid, timecat = timecat, fail = fail, symptom0, symptom1, symptom2, raceother, male)
#code to add indicator effects of every timeunit
Xmat <- array(0, c(nrow(datcat), length(bounds)))
# previd <- NA
# changes <- c(diff(datcat$personid), 1) #a 1 marks the final index of each personid
# counts <- data.frame(x = datcat$personid) %>% group_by(x) %>% mutate(n=n()) %>% '[['("n")
for(r in 1:nrow(datcat)){
Xmat[r,datcat$timecat[r]] <- 1
}
colnames(Xmat) <- paste0("X",1:ncol(Xmat))
datcat_X <- (cbind((datcat), Xmat))
nullmod <- glm(fail ~ 1, data=datcat_X, family="binomial")
logistic_diagnostics <- function(mod=NA, ydat=y, Xdat=X){
if(class(mod) == "cv.glmnet"){
fitvals <- predict.cv.glmnet(mod, newx = Xdat, s="lambda.min")
}else{
fitvals <- predict.glm(mod, newdata=data.frame(Xdat))
}
p_hat <- de_logit(fitvals)
resids_p <- (ydat-p_hat)/(sqrt(p_hat*(1-p_hat)))
s <- ydat; s[ydat==0] <- -1
resids_d <- s*sqrt(-2*(ydat*log(p_hat) + (1-ydat)*log(1-p_hat)))
resids_p_stat <- sum(resids_p^2)
resids_d_stat <- -2*sum(ydat*log(p_hat) + (1-ydat)*log(1-p_hat))
p <- sum(as.matrix(coef(mod)) != 0)
dof <- nrow(Xdat)-p
return(list(p_hat = p_hat, resids_p=resids_p, resids_p_stat=resids_p_stat, resids_d=resids_d, resids_d_stat=resids_d_stat, dof=dof))
}
indepcols <- which(!colnames(datcat_X) %in% c("fail", "personid", "timecat"))
X <- as.matrix(datcat_X[,indepcols])
y <- datcat_X$fail
#0 means no incercept
logmod <- glm(y ~ 0 + ., family="binomial", data = as.data.frame(cbind(y,X)))
logmod_stats <- logistic_diagnostics(logmod)
logmodtest <- pchisq(logmod$deviance, logmod$df.residual, lower=FALSE)
lassomod <- cv.glmnet(y=y, x = X, family="binomial", type.measure="class", alpha = 1, intercept=FALSE)
lassomod_stats <- logistic_diagnostics(lassomod)
lassomodtest <- pchisq(lassomod_stats$resids_d_stat, lassomod_stats$dof, lower=FALSE)
ridgemod <- cv.glmnet(y=y, x = X, family="binomial", type.measure="class", alpha = 0,intercept=FALSE)
ridgemod_stats <- logistic_diagnostics(ridgemod)
ridgemodtest <- pchisq(ridgemod_stats$resids_d_stat, ridgemod_stats$dof, lower=FALSE)
bounds <- 0:5
dat$timecat <- as.integer(as.factor(lower_bound(dat$nctdel, bounds)))
dat %>% group_by(timecat) %>% summarize(n)
dat %>% group_by(timecat) %>% summarize(n())
bounds <- 0:3
dat$timecat <- as.integer(as.factor(lower_bound(dat$nctdel, bounds)))
dat$personid <- 1:nrow(dat)
datcat <- merge(dat$personid, bounds) %>%
unique() %>%
mutate(personid=x, timecat=as.integer(as.factor(y))) %>%
arrange(personid, timecat) %>%
#take all unique combinations of people and time categories
merge(dat, by=c("personid", "timecat"), all=TRUE) %>%
mutate(fail = ifelse(is.na(fail), 0, fail)) %>%
#add fail column
group_by(personid) %>%
mutate(maxtimecat = (timecat)[!is.na(nctdel)],
atrisk = (timecat <= maxtimecat)) %>%
filter(atrisk) %>%
#for each person, identify rows where persons are not at risk (after they fail/drop out), and remove those rows
dplyr::select(personid, timecat, fail) %>%
as.data.frame()
dat %>% group_by(timecat) %>% summarize(n())
datcat <- merge(dat$personid, bounds) %>%
unique() %>%
mutate(personid=x, timecat=as.integer(as.factor(y))) %>%
arrange(personid, timecat) %>%
#take all unique combinations of people and time categories
merge(dat, by=c("personid", "timecat"), all=TRUE) %>%
mutate(fail = ifelse(is.na(fail), 0, fail)) %>%
#add fail column
group_by(personid) %>%
mutate(maxtimecat = (timecat)[!is.na(nctdel)],
atrisk = (timecat <= maxtimecat)) %>%
filter(atrisk) %>%
#for each person, identify rows where persons are not at risk (after they fail/drop out), and remove those rows
dplyr::select(personid, timecat, fail) %>%
as.data.frame()
#code to add predictors of race, gender, and number of symptoms
datcat <- merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom0 = ifelse(symptom == 0, 1, 0),
symptom1 = ifelse(symptom == 1, 1, 0),
symptom2 = ifelse(symptom == 2, 1, 0),
raceother = ifelse(race == "Other", 1, 0),
male = ifelse(gender == "male", 1, 0),
personid = as.integer(personid),
timecat = as.integer(timecat.x),
fail = as.integer(fail.x)) %>%
dplyr::select(personid, timecat = timecat, fail = fail, symptom0, symptom1, symptom2, raceother, male)
#code to add indicator effects of every timeunit
Xmat <- array(0, c(nrow(datcat), length(bounds)))
# previd <- NA
# changes <- c(diff(datcat$personid), 1) #a 1 marks the final index of each personid
# counts <- data.frame(x = datcat$personid) %>% group_by(x) %>% mutate(n=n()) %>% '[['("n")
for(r in 1:nrow(datcat)){
Xmat[r,datcat$timecat[r]] <- 1
}
colnames(Xmat) <- paste0("X",1:ncol(Xmat))
datcat_X <- (cbind((datcat), Xmat))
nullmod <- glm(fail ~ 1, data=datcat_X, family="binomial")
logistic_diagnostics <- function(mod=NA, ydat=y, Xdat=X){
if(class(mod) == "cv.glmnet"){
fitvals <- predict.cv.glmnet(mod, newx = Xdat, s="lambda.min")
}else{
fitvals <- predict.glm(mod, newdata=data.frame(Xdat))
}
p_hat <- de_logit(fitvals)
resids_p <- (ydat-p_hat)/(sqrt(p_hat*(1-p_hat)))
s <- ydat; s[ydat==0] <- -1
resids_d <- s*sqrt(-2*(ydat*log(p_hat) + (1-ydat)*log(1-p_hat)))
resids_p_stat <- sum(resids_p^2)
resids_d_stat <- -2*sum(ydat*log(p_hat) + (1-ydat)*log(1-p_hat))
p <- sum(as.matrix(coef(mod)) != 0)
dof <- nrow(Xdat)-p
return(list(p_hat = p_hat, resids_p=resids_p, resids_p_stat=resids_p_stat, resids_d=resids_d, resids_d_stat=resids_d_stat, dof=dof))
}
indepcols <- which(!colnames(datcat_X) %in% c("fail", "personid", "timecat"))
X <- as.matrix(datcat_X[,indepcols])
y <- datcat_X$fail
#0 means no incercept
logmod <- glm(y ~ 0 + ., family="binomial", data = as.data.frame(cbind(y,X)))
logmod_stats <- logistic_diagnostics(logmod)
logmodtest <- pchisq(logmod$deviance, logmod$df.residual, lower=FALSE)
lassomod <- cv.glmnet(y=y, x = X, family="binomial", type.measure="class", alpha = 1, intercept=FALSE)
lassomod_stats <- logistic_diagnostics(lassomod)
lassomodtest <- pchisq(lassomod_stats$resids_d_stat, lassomod_stats$dof, lower=FALSE)
ridgemod <- cv.glmnet(y=y, x = X, family="binomial", type.measure="class", alpha = 0,intercept=FALSE)
ridgemod_stats <- logistic_diagnostics(ridgemod)
ridgemodtest <- pchisq(ridgemod_stats$resids_d_stat, ridgemod_stats$dof, lower=FALSE)
binnedplot(x=logmod$fitted.values, y=logmod_stats$resids_d, main = "OLS Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
binnedplot(x=lassomod_stats$p_hat, y=lassomod_stats$resids_d, main = "LASSO Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
binnedplot(x=ridgemod_stats$p_hat, y=ridgemod_stats$resids_d, main = "Ridge Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
lassomodcoef
d
d <- matrix(c(logmodtest, lassomodtest, ridgemodtest))
d
colnames(d) <- "p-value"
rownames(d) <- c("Ordinary Least Squares", "LASSO Penalty", "Ridge Penalty")
d
bounds <- c(0,2,4,6)
dat$timecat <- as.integer(as.factor(lower_bound(dat$nctdel, bounds)))
dat$personid <- 1:nrow(dat)
datcat <- merge(dat$personid, bounds) %>%
unique() %>%
mutate(personid=x, timecat=as.integer(as.factor(y))) %>%
arrange(personid, timecat) %>%
#take all unique combinations of people and time categories
merge(dat, by=c("personid", "timecat"), all=TRUE) %>%
mutate(fail = ifelse(is.na(fail), 0, fail)) %>%
#add fail column
group_by(personid) %>%
mutate(maxtimecat = (timecat)[!is.na(nctdel)],
atrisk = (timecat <= maxtimecat)) %>%
filter(atrisk) %>%
#for each person, identify rows where persons are not at risk (after they fail/drop out), and remove those rows
dplyr::select(personid, timecat, fail) %>%
as.data.frame()
#code to add predictors of race, gender, and number of symptoms
datcat <- merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom0 = ifelse(symptom == 0, 1, 0),
symptom1 = ifelse(symptom == 1, 1, 0),
symptom2 = ifelse(symptom == 2, 1, 0),
raceother = ifelse(race == "Other", 1, 0),
male = ifelse(gender == "male", 1, 0),
personid = as.integer(personid),
timecat = as.integer(timecat.x),
fail = as.integer(fail.x)) %>%
dplyr::select(personid, timecat = timecat, fail = fail, symptom0, symptom1, symptom2, raceother, male)
#code to add indicator effects of every timeunit
Xmat <- array(0, c(nrow(datcat), length(bounds)))
# previd <- NA
# changes <- c(diff(datcat$personid), 1) #a 1 marks the final index of each personid
# counts <- data.frame(x = datcat$personid) %>% group_by(x) %>% mutate(n=n()) %>% '[['("n")
for(r in 1:nrow(datcat)){
Xmat[r,datcat$timecat[r]] <- 1
}
colnames(Xmat) <- paste0("X",1:ncol(Xmat))
datcat_X <- (cbind((datcat), Xmat))
nullmod <- glm(fail ~ 1, data=datcat_X, family="binomial")
logistic_diagnostics <- function(mod=NA, ydat=y, Xdat=X){
if(class(mod) == "cv.glmnet"){
fitvals <- predict.cv.glmnet(mod, newx = Xdat, s="lambda.min")
}else{
fitvals <- predict.glm(mod, newdata=data.frame(Xdat))
}
p_hat <- de_logit(fitvals)
resids_p <- (ydat-p_hat)/(sqrt(p_hat*(1-p_hat)))
s <- ydat; s[ydat==0] <- -1
resids_d <- s*sqrt(-2*(ydat*log(p_hat) + (1-ydat)*log(1-p_hat)))
resids_p_stat <- sum(resids_p^2)
resids_d_stat <- -2*sum(ydat*log(p_hat) + (1-ydat)*log(1-p_hat))
p <- sum(as.matrix(coef(mod)) != 0)
dof <- nrow(Xdat)-p
return(list(p_hat = p_hat, resids_p=resids_p, resids_p_stat=resids_p_stat, resids_d=resids_d, resids_d_stat=resids_d_stat, dof=dof))
}
indepcols <- which(!colnames(datcat_X) %in% c("fail", "personid", "timecat"))
X <- as.matrix(datcat_X[,indepcols])
y <- datcat_X$fail
#0 means no incercept
logmod <- glm(y ~ 0 + ., family="binomial", data = as.data.frame(cbind(y,X)))
logmod_stats <- logistic_diagnostics(logmod)
logmodtest <- pchisq(logmod$deviance, logmod$df.residual, lower=FALSE)
lassomod <- cv.glmnet(y=y, x = X, family="binomial", type.measure="class", alpha = 1, intercept=FALSE)
lassomod_stats <- logistic_diagnostics(lassomod)
lassomodtest <- pchisq(lassomod_stats$resids_d_stat, lassomod_stats$dof, lower=FALSE)
ridgemod <- cv.glmnet(y=y, x = X, family="binomial", type.measure="class", alpha = 0,intercept=FALSE)
ridgemod_stats <- logistic_diagnostics(ridgemod)
ridgemodtest <- pchisq(ridgemod_stats$resids_d_stat, ridgemod_stats$dof, lower=FALSE)
binnedplot(x=logmod$fitted.values, y=logmod_stats$resids_d, main = "OLS Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
binnedplot(x=lassomod_stats$p_hat, y=lassomod_stats$resids_d, main = "LASSO Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
binnedplot(x=lassomod_stats$p_hat, y=lassomod_stats$resids_d, main = "LASSO Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
binnedplot(x=ridgemod_stats$p_hat, y=ridgemod_stats$resids_d, main = "Ridge Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
d <- matrix(c(logmodtest, lassomodtest, ridgemodtest))
colnames(d) <- "p-value"
rownames(d) <- c("Ordinary Least Squares", "LASSO Penalty", "Ridge Penalty")
d
bounds <- 0:5
dat$timecat <- as.integer(as.factor(lower_bound(dat$nctdel, bounds)))
dat$personid <- 1:nrow(dat)
datcat <- merge(dat$personid, bounds) %>%
unique() %>%
mutate(personid=x, timecat=as.integer(as.factor(y))) %>%
arrange(personid, timecat) %>%
#take all unique combinations of people and time categories
merge(dat, by=c("personid", "timecat"), all=TRUE) %>%
mutate(fail = ifelse(is.na(fail), 0, fail)) %>%
#add fail column
group_by(personid) %>%
mutate(maxtimecat = (timecat)[!is.na(nctdel)],
atrisk = (timecat <= maxtimecat)) %>%
filter(atrisk) %>%
#for each person, identify rows where persons are not at risk (after they fail/drop out), and remove those rows
dplyr::select(personid, timecat, fail) %>%
as.data.frame()
#code to add predictors of race, gender, and number of symptoms
datcat <- merge(datcat, dat, by="personid", all=T) %>%
mutate(symptom0 = ifelse(symptom == 0, 1, 0),
symptom1 = ifelse(symptom == 1, 1, 0),
symptom2 = ifelse(symptom == 2, 1, 0),
raceother = ifelse(race == "Other", 1, 0),
male = ifelse(gender == "male", 1, 0),
personid = as.integer(personid),
timecat = as.integer(timecat.x),
fail = as.integer(fail.x)) %>%
dplyr::select(personid, timecat = timecat, fail = fail, symptom0, symptom1, symptom2, raceother, male)
#code to add indicator effects of every timeunit
Xmat <- array(0, c(nrow(datcat), length(bounds)))
# previd <- NA
# changes <- c(diff(datcat$personid), 1) #a 1 marks the final index of each personid
# counts <- data.frame(x = datcat$personid) %>% group_by(x) %>% mutate(n=n()) %>% '[['("n")
for(r in 1:nrow(datcat)){
Xmat[r,datcat$timecat[r]] <- 1
}
colnames(Xmat) <- paste0("X",1:ncol(Xmat))
datcat_X <- (cbind((datcat), Xmat))
nullmod <- glm(fail ~ 1, data=datcat_X, family="binomial")
logistic_diagnostics <- function(mod=NA, ydat=y, Xdat=X){
if(class(mod) == "cv.glmnet"){
fitvals <- predict.cv.glmnet(mod, newx = Xdat, s="lambda.min")
}else{
fitvals <- predict.glm(mod, newdata=data.frame(Xdat))
}
p_hat <- de_logit(fitvals)
resids_p <- (ydat-p_hat)/(sqrt(p_hat*(1-p_hat)))
s <- ydat; s[ydat==0] <- -1
resids_d <- s*sqrt(-2*(ydat*log(p_hat) + (1-ydat)*log(1-p_hat)))
resids_p_stat <- sum(resids_p^2)
resids_d_stat <- -2*sum(ydat*log(p_hat) + (1-ydat)*log(1-p_hat))
p <- sum(as.matrix(coef(mod)) != 0)
dof <- nrow(Xdat)-p
return(list(p_hat = p_hat, resids_p=resids_p, resids_p_stat=resids_p_stat, resids_d=resids_d, resids_d_stat=resids_d_stat, dof=dof))
}
indepcols <- which(!colnames(datcat_X) %in% c("fail", "personid", "timecat"))
X <- as.matrix(datcat_X[,indepcols])
y <- datcat_X$fail
#0 means no incercept
logmod <- glm(y ~ 0 + ., family="binomial", data = as.data.frame(cbind(y,X)))
logmod_stats <- logistic_diagnostics(logmod)
logmodtest <- pchisq(logmod$deviance, logmod$df.residual, lower=FALSE)
lassomod <- cv.glmnet(y=y, x = X, family="binomial", type.measure="class", alpha = 1, intercept=FALSE)
lassomod_stats <- logistic_diagnostics(lassomod)
lassomodtest <- pchisq(lassomod_stats$resids_d_stat, lassomod_stats$dof, lower=FALSE)
ridgemod <- cv.glmnet(y=y, x = X, family="binomial", type.measure="class", alpha = 0,intercept=FALSE)
ridgemod_stats <- logistic_diagnostics(ridgemod)
ridgemodtest <- pchisq(ridgemod_stats$resids_d_stat, ridgemod_stats$dof, lower=FALSE)
d
binnedplot(x=logmod$fitted.values, y=logmod_stats$resids_d, main = "OLS Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
lassomodcoef <- round(as.matrix(coef(lassomod)),4)
colnames(lassomodcoef) <- "Estimate"
binnedplot(x=lassomod_stats$p_hat, y=lassomod_stats$resids_d, main = "LASSO Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
ridgemodcoef <- round(as.matrix(coef(ridgemod)),4)
colnames(ridgemodcoef) <- "Estimate"
binnedplot(x=ridgemod_stats$p_hat, y=ridgemod_stats$resids_d, main = "Ridge Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
d
sum(dat$nctdel > 5)
dat.KM <- survfit(Surv(nctdel, fail) ~ 1, data = dat) #estimated survival curve
plot(dat.KM, main=expression(paste("Kaplan-Meier Estimate ", hat(S)(t), " with CI")),
xlab="t", ylab="Survival", lwd=2)
ggcoxdiagnostics(fitCPH_all, type = "deviance",
linear.predictions = FALSE, ggtheme = theme_bw(), main= "Residuals.") #residuals
ggcoxdiagnostics(fitCPH_all, type = "dfbeta",
linear.predictions = FALSE, ggtheme = theme_bw(),  main="Sympt. Influential Pts")#influential points
cox.zph(fitCPH_all)
kable(cox.zph(fitCPH_all))
kable(as.data.frame(cox.zph(fitCPH_all)))
kable(data.frame(cox.zph(fitCPH_all)))
cox.zph(fitCPH_all))
cox.zph(fitCPH_all)
class(cox.zph(fitCPH_all)
)
class(cox.zph(fitCPH_all))
typeof(cox.zph(fitCPH_all))
data.frame(cox.zph(fitCPH_all))
as.matrix(cox.zph(fitCPH_all))
matrix(cox.zph(fitCPH_all))
as.matrix(cox.zph(fitCPH_all))
cox.zph(fitCPH_all)
cox.zph(fitCPH_all)[[1]]
cox.zph(fitCPH_all)[[2]]
kable(data.frame(cox.zph(fitCPH_all)[[1]]))
data.frame(cox.zph(fitCPH_all))
coef
coef(logmod)
summary(logmod)$coefficients
stats[,1]
stats <- summary(logmod)$coefficients
stats[,1]
stats <- summary(logmod)$coefficients
stats[,1]
1.
xbar + 1.96*c(-sigma, sigma)
stats <- summary(logmod)$coefficients
xbar <- stats[,1]
sigma <- stats[,2]
xbar + 1.96*c(-sigma, sigma)
stats <- summary(logmod)$coefficients
xbar <- stats[,1]
sigma <- stats[,2]
xbar + 1.96*c(-sigma, sigma)
xbar + 1.96*c(-sigma)
xbar + 1.96*cbind(-sigma, sigma)
summary(logmod)
stats <- summary(logmod)$coefficients
xbar <- stats[,1]
sigma <- stats[,2]
logmodcoef <- xbar + 1.96*cbind(-sigma, sigma)
colnames(lassomodcoef) <- c("Lower", "Upper")
stats <- summary(logmod)$coefficients
xbar <- stats[,1]
sigma <- stats[,2]
logmodcoef <- xbar + 1.96*cbind(-sigma, sigma)
logmodcoef <- round(summary(logmod)[["coefficients"]][,c(1,4)],4)
colnames(logmodcoef) <- c("Lower", "Upper")
binnedplot(x=logmod$fitted.values, y=logmod_stats$resids_d, main = "OLS Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
stats <- summary(logmod)$coefficients
xbar <- stats[,1]
sigma <- stats[,2]
logmodcoef <- xbar + 1.96*cbind(-sigma, sigma)
logmodcoef <- round(summary(logmod)[["coefficients"]][,c(1,4)],4)
colnames(logmodcoef) <- c("Lower", "Upper")
binnedplot(x=logmod$fitted.values, y=logmod_stats$resids_d, main = "OLS Logistic Regression Binned Residuals", ylab = "Deviance Residuals", xlab = "Fitted Values", nclass = 50)
logmodcoef
stats <- summary(logmod)$coefficients
xbar <- stats[,1]
sigma <- stats[,2]
logmodcoef <- xbar + 1.96*cbind(-sigma, sigma)
colnames(logmodcoef) <- c("Lower", "Upper")
logmodcoef
logmodcoef[,c("Lower")]
logmodcoef$Lower < 0 & logmodcoef$Upper > 0
logmodcoef
logmodcoef$Upper
class(logmodcoef)
logmodcoef[,1] < 0 & logmodcoef[,2] > 0
which(!(logmodcoef[,1] < 0 & logmodcoef[,2] > 0))
names(which(!(logmodcoef[,1] < 0 & logmodcoef[,2] > 0)))
names(which(!(logmodcoef[,1] < 0 & logmodcoef[,2] > 0))) %>% paste(sep = "and")
names(which(!(logmodcoef[,1] < 0 & logmodcoef[,2] > 0))) %>% paste(collapse = "and")
names(which(!(logmodcoef[,1] < 0 & logmodcoef[,2] > 0))) %>% paste(collapse = " and ")
paste("hey", collapse=5)
paste("hey", collapse="34")
paste("hey", "4",  collapse="34")
paste(c("hey","abd")  collapse="34")
paste(c("hey","abd")  ,collapse="34")
names(which(!(logmodcoef[,1] < 0 & logmodcoef[,2] > 0))) %>% paste(collapse = " and ")
summary(fitCPH_all)
kable(summary(fitCPH_all))
summary(fitCPH_allround(matrix(c(logmodtest, lassomodtest, ridgemodtest)),4))
round(matrix(c(logmodtest, lassomodtest, ridgemodtest)),4)
logmodcoef <- round(logmodcoef,4)
logmodcoef
